{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/ChatItem/ChatItem.module.css","components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Common/Preloader/Loading.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","serviceWorker.js","api/api.js","redux/profileReducer.js","redux/dialogsReducer.js","redux/usersReducer.js","redux/authorizeReducer.js","redux/appReducer.js","redux/reduxStore.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/ChatItem/ChatItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","components/Users/UserElementMarkup.jsx","components/Users/Users.jsx","components/Common/Preloader/Loading.jsx","redux/user-selector.js","components/Users/UsersContainer.jsx","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","App.js","index.js","components/Navbar/Navbar.module.css","assets/img/simple-avatar.png"],"names":["module","exports","dialogsWrapper","dialogsNamesWindow","chatWindow","active","dialogImg","dialogName","sender","answer","userPhoto","userElement","selectedPage","content","header","loginBlock","lds_roller","lds-roller","descriptionBlock","item","Boolean","window","location","hostname","match","instance","axios","withCredentials","baseURL","headers","API-KEY","usersAPI","getUsers","currentPage","arguments","length","undefined","pageSize","get","concat","then","response","data","getUnfollow","userID","delete","getFollow","post","getProfile","console","warn","profileAPI","authAPI","email","password","rememberMe","getStatus","updateStatus","status","put","updatePhoto","file","formData","FormData","append","Content-Type","initialState","postsDataBase","id","text","like","postTypingText","profile","setStatus","type","profileReducer","state","action","Object","objectSpread","typingText","newPost","toConsumableArray","photos","dialogsNamesData","name","avatar","messageDataBase","messageTypingText","dialogsReducer","newMessage","usersData","totalUsersCount","waitingResponse","waitingSubscribe","followSuccess","unfollowSuccess","toggleWaiting","toggle","toggleSubscribeProgress","followUnfollow","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","APImethod","actionCreator","wrap","_context2","prev","next","sent","resultCode","stop","_x2","_x3","_x4","_x5","apply","this","usersReducer","map","user","followed","users","totalCount","login","isAuthorize","setLoginData","payload","getAuthUserData","_ref","_callee","_response$data$data","_context","_x","authorizeReducer","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","usersPage","authorizeBlock","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","DialogItem","props","path","react_default","createElement","react_router_dom","activeClassName","s","to","className","src","alt","chatName","ChatItem","message","Dialogs","refTextArea","React","createRef","elem","Dialogs_DialogItem_DialogItem","key","Dialogs_ChatItem_ChatItem","onChange","messageTextValue","current","value","textChange","ref","onClick","sendMessage","withAuthRedirect","Component","RedirectComponent","_React$Component","inherits","_super","_createSuper","classCallCheck","createClass","react_router","connect","updTypingMessageCreator","UserElementMarkup","styles","small","AvatarIMG","disabled","unfollow","follow","Users","pagination","defaultCurrent","total","pageNumber","onPageChange","defaultPageSize","Users_UserElementMarkup","Loading","style","getUsersData","createSelector","filter","u","getPageSize","getTotalUsersCount","getCurrentPage","UsersContainer","_this","setCurrentPage","setPageSize","Fragment","Preloader_Loading","components_Users_Users","_ref4","_callee4","_context4","bind","_x7","_ref3","_callee3","_context3","_x6","items","ProfileStatusHooks","_useState","useState","_useState2","slicedToArray","editMode","setEditMode","_useState3","_useState4","useEffect","onDoubleClick","e","currentTarget","onBlur","sendNewStatus","ProfileInfo","userId","yourID","target","files","savePhoto","fullName","ProfileInfo_ProfileStatusHooks","Post","MyPosts","memo","postTextValue","updTypingPost","addPost","posts","MyPosts_Post_Post","MyPostsContainer","updTypingPostCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","params","getUserProfile","getUserStatus","components_Profile_Profile","assign","withRouter","Header","logOut","HeaderContainer","components_Header_Header","layout","labelCol","span","wrapperCol","Login","signIn","es_form","initialValues","remember","onFinish","values","username","log","onFinishFailed","errorInfo","Item","label","rules","required","input","Password","valuePropName","es_checkbox","es_button","htmlType","alert","messages","sendSignIdData","Layout","Content","Footer","Sider","App","initializeApp","es_layout","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","menu","theme","mode","defaultSelectedKeys","icon","UserOutlined_default","CommentOutlined_default","TeamOutlined_default","LoginOutlined_default","GithubOutlined_default","href","App_Header","padding","margin","minHeight","render","DialogsContainer","Profile_ProfileContainer","Users_UsersContainer","LoginContainer","textAlign","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","nav","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e47a44af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__3tkny\",\"dialogsNamesWindow\":\"Dialogs_dialogsNamesWindow__1D3Lt\",\"chatWindow\":\"Dialogs_chatWindow__3UFSt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"DialogItem_active__gHXDC\",\"dialogImg\":\"DialogItem_dialogImg__eaGjg\",\"dialogName\":\"DialogItem_dialogName__2In07\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sender\":\"ChatItem_sender__301_D\",\"answer\":\"ChatItem_answer__3m4qD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1tAeN\",\"userElement\":\"Users_userElement__3cP1E\",\"selectedPage\":\"Users_selectedPage__3su2S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__3b2Ol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2cZvj\",\"loginBlock\":\"Header_loginBlock__2r5gj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_roller\":\"Loading_lds_roller__2kYzN\",\"lds-roller\":\"Loading_lds-roller__2x4n_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__H4tio\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1_LT_\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"b7aec3a8-1b77-41d6-aded-3789221e7d40\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = { //API для странички пользователей\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    getUnfollow(userID) {\r\n        return instance.delete(`follow/${userID}`)\r\n            .then(response => response.data);\r\n    },\r\n    getFollow(userID) {\r\n        return instance.post(`follow/${userID}`)\r\n            .then(response => response.data);\r\n    },\r\n    getProfile(userID) {\r\n        console.warn(\"Obsolete method. Use profileAPI\");\r\n        return profileAPI.getProfile(userID);\r\n    }\r\n};\r\n\r\nexport const authAPI = { // API для логина\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    login(email, password, rememberMe = false){\r\n        return instance.post(`/auth/login/`,{email, password, rememberMe});\r\n    },\r\n    logout(){\r\n        return instance.delete(`/auth/login/`);\r\n    }\r\n}\r\n\r\nexport const profileAPI = { //API для своего профиля\r\n\r\n    getProfile(userID) {\r\n        return instance.get(`profile/${userID}`);\r\n    },\r\n    getStatus(userID) {\r\n        return instance.get(`profile/status/${userID}`);\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status/`, {status : status}); //\"status :\"-свойство объ к-рое требует сервер\r\n    },\r\n    updatePhoto(file) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", file)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    }\r\n}","import {profileAPI} from \"../api/api\";\r\n\r\nconst UPD_TYPING_POST = \"UPD_TYPING_POST\";\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst SET_PHOTOS_LINKS = \"SET_PHOTOS_LINKS\";\r\n\r\nlet initialState = {\r\n    postsDataBase: [\r\n        {id: 1, text: 'Hello my friends!', like: 25},\r\n        {id: 2, text: 'I learn react', like: 13},\r\n        {id: 3, text: 'Far far away...', like: 20},\r\n    ],\r\n    postTypingText: \"\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPD_TYPING_POST:\r\n            return {\r\n                ...state,\r\n                postTypingText: action.typingText\r\n            };\r\n\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 4,\r\n                text: state.postTypingText,\r\n                like: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsDataBase: [...state.postsDataBase, newPost],\r\n                postTypingText: ''\r\n            };\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_PHOTOS_LINKS:\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n\r\n        default: // если ни один из action.type не подходит. Default необходим\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n//post Creators\r\nexport const addPostCreator = () => ({type: ADD_POST});\r\nexport const updTypingPostCreator = (text) => ({type: UPD_TYPING_POST, typingText: text});\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const setStatus = (status) => ({type: SET_STATUS, status: status});\r\nexport const setPhotosLinks = (photos) => ({type: SET_PHOTOS_LINKS, photos});\r\n\r\nexport const getUserProfile = (userID) => async (dispatch) => {\r\n    let response = await profileAPI.getProfile(userID);\r\n\r\n    dispatch(setUserProfile(response.data)); //dispatch вызывает setUserProfile(response.data) и тот возвращает экшн\r\n}\r\n\r\nexport const getUserStatus = (userID) =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userID);\r\n\r\n        if (response.data === \"\") {\r\n            response.data = \"status if empty\"\r\n        }\r\n        dispatch(setStatus(response.data));\r\n\r\n    }\r\n\r\nexport const sendNewStatus = (status) =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n\r\n    }\r\n\r\nexport const uploadPhoto = (file) =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updatePhoto(file);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setPhotosLinks(response.data.data.photos));\r\n        }\r\n    }\r\n\r\nexport default profileReducer;","const UPD_TYPING_MESSAGE = \"UPD_TYPING_MESSAGE\";\r\nconst ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogsNamesData: [\r\n        {id: 1, name: 'Nikita', avatar: 'https://avas.at.ua/_ph/45/1/469869713.jpg?1603712491'},\r\n        {id: 2, name: 'Egor', avatar: 'https://avas.at.ua/_ph/45/1/563058985.jpg?1603712491'},\r\n        {id: 3, name: 'Dima', avatar: 'https://avas.at.ua/_ph/45/1/940876170.jpg?1603712670'},\r\n    ],\r\n\r\n    messageDataBase: [\r\n        {id: 1, sender: true, text: \"Hello!\"},\r\n        {id: 2, sender: true, text: \"How are you?\"},\r\n        {id: 3, sender: false, text: \"I'll find you and hug!\"},\r\n        {id: 4, sender: true, text: \"Oh, no!\"},\r\n        {id: 5, sender: false, text: \"Time is running...\"},\r\n    ],\r\n    messageTypingText: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case UPD_TYPING_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messageTypingText: action.typingText\r\n            };\r\n\r\n        case ADD_MESSAGE:\r\n            let newMessage = {\r\n                id: 6,\r\n                sender: false,\r\n                text: state.messageTypingText\r\n            };\r\n            return {\r\n                ...state,\r\n                messageDataBase: [...state.messageDataBase, newMessage],\r\n                messageTypingText: \"\"\r\n            };\r\n\r\n        default : // если ни один из action.type не подходит\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n//chat Creators\r\nexport const sendMessageCreator = () => {\r\n\r\n    return {\r\n        type: ADD_MESSAGE\r\n    }\r\n}\r\n\r\nexport const updTypingMessageCreator = (text) => {\r\n\r\n    return {\r\n        type: UPD_TYPING_MESSAGE,\r\n        typingText: text\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import {usersAPI} from \"../api/api\";\r\n\r\nconst SET_USERS = \"SET_USERS\";\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_PAGE_SIZE = \"SET_PAGE_SIZE\";\r\nconst WAITING_RESPONSE = \"WAITING_RESPONSE\";\r\nconst WAITING_SUBSCRIBE = \"WAITING_SUBSCRIBE\";\r\n\r\nlet initialState = {\r\n    usersData: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    waitingResponse: false,\r\n    waitingSubscribe: {status: false, id: null}\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(user => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(user => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: false}\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                usersData: action.users,\r\n                totalUsersCount: action.totalCount\r\n            };\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_PAGE_SIZE:\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n\r\n        case WAITING_RESPONSE:\r\n            return {\r\n                ...state,\r\n                waitingResponse: action.toggle\r\n            }\r\n        case WAITING_SUBSCRIBE:\r\n            return {\r\n                ...state,\r\n                waitingSubscribe: {status: action.toggle, id: action.userID}\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID) => ({type: FOLLOW, id: userID});\r\nexport const unfollowSuccess = (userID) => ({type: UNFOLLOW, id: userID});\r\nexport const setUsers = (users, totalCount) => ({type: SET_USERS, users, totalCount});\r\nexport const setCurrentPage = (pageNumber) => ({type: SET_CURRENT_PAGE, currentPage: pageNumber});\r\nexport const setPageSize = (pageSize) => ({type: SET_PAGE_SIZE, pageSize: pageSize});\r\nexport const toggleWaiting = (toggle) => ({type: WAITING_RESPONSE, toggle});\r\nexport const toggleSubscribeProgress = (toggle, userID) => ({type: WAITING_SUBSCRIBE, toggle, userID});\r\n\r\nexport const getUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(toggleWaiting(true));\r\n        currentPage = currentPage === 0 ? currentPage = 1 : currentPage;\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(toggleWaiting(false));\r\n        dispatch(setUsers(data.items, data.totalCount));\r\n\r\n    }\r\n}\r\n\r\nexport const followUnfollow = async (dispatch, userID, APImethod, actionCreator) => {\r\n\r\n    dispatch(toggleSubscribeProgress(true, userID));\r\n\r\n    let response = await APImethod(userID);\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userID));\r\n    }\r\n    dispatch(toggleSubscribeProgress(false));\r\n\r\n}\r\n\r\nexport const unfollow = (userID) => {\r\n    return async (dispatch) => { //функция dispatch приходит в санку из стора. Параметры, как userID передавать только через замыкание.\r\n        followUnfollow(dispatch, userID, usersAPI.getUnfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport const follow = (userID) => {\r\n    return async (dispatch) => { //функция dispatch приходит в санку из стора. Параметры, как userID передавать только через замыкание.\r\n        followUnfollow(dispatch, userID, usersAPI.getFollow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\n\r\nconst SET_LOGIN_DATA = \"SET_LOGIN_DATA\";\r\n\r\nlet initialState = {\r\n    login: null,\r\n    userID: null,\r\n    email: null,\r\n    isAuthorize: false\r\n}\r\n\r\n\r\nconst authorizeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_LOGIN_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setLoginData = (userID, email, login, isAuthorize) => ({\r\n    type: SET_LOGIN_DATA,\r\n    payload: {userID, email, login, isAuthorize}\r\n});\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setLoginData(id, email, login, true));\r\n    }\r\n\r\n};\r\n\r\nexport const sendSignIdData = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        alert(response.data.messages);\r\n    }\r\n\r\n};\r\n\r\nexport const logOut = () => (dispatch) => {\r\n    authAPI.logout().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setLoginData(null, null, null, false));\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default authorizeReducer;","import {getAuthUserData} from \"./authorizeReducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializeSuccess = () => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData()); // getAuthUserData возвращает промисс\r\n    promise.then(() => {\r\n        dispatch(initializeSuccess());\r\n    });\r\n};\r\n\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authorizeReducer from \"./authorizeReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    authorizeBlock: authorizeReducer,\r\n    app: appReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.store = store; // строка для того, чтоб можно было в консоли обращаться к стору\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div>\r\n            <NavLink activeClassName={s.active} to={path}>\r\n                <img className={s.dialogImg} src={props.avatar} alt=\"chatAvatar\"/>\r\n                <span className={s.dialogName}>{props.chatName}</span>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './ChatItem.module.css';\r\n\r\nconst ChatItem = (props) => {\r\n    let status = props.sender === true ? s.sender : s.answer;\r\n    return (\r\n        <div className={status}>{props.message}</div>\r\n    );\r\n\r\n}\r\n\r\nexport default ChatItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport ChatItem from \"./ChatItem/ChatItem\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let refTextArea = React.createRef();\r\n\r\n    let sendMessageButton = () => {\r\n        props.sendMessage();\r\n    }\r\n    let onMessageChange = () => {\r\n        debugger;\r\n        let messageTextValue = refTextArea.current.value;\r\n        props.textChange(messageTextValue);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.dialogsNamesWindow}>\r\n                {props.dialogsPage.dialogsNamesData.map(elem => <DialogItem id={elem.id} chatName={elem.name}\r\n                                                                            avatar={elem.avatar} key={elem.id}/>)}\r\n            </div>\r\n\r\n            <div className={s.chatWindow}>\r\n                {props.dialogsPage.messageDataBase.map(elem => <ChatItem message={elem.text} sender={elem.sender}\r\n                                                                         key={elem.id}/>)}\r\n                <div>\r\n                    <textarea onChange={onMessageChange} ref={refTextArea} value={props.dialogsPage.messageTypingText}/>\r\n                    <button onClick={sendMessageButton}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuthorize) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let mapStateToProps = (state) => ({\r\n        isAuthorize: state.authorizeBlock.isAuthorize\r\n    });\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import {sendMessageCreator, updTypingMessageCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        textChange: (text) => {\r\n            dispatch(updTypingMessageCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport AvatarIMG from '../../assets/img/simple-avatar.png';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nlet UserElementMarkup = (props) => {\r\n\r\n\r\n    return <div className={styles.userElement}>\r\n        <NavLink to={`/profile/${props.id}`}>\r\n            <div><img alt=\"userPhoto\" className={styles.userPhoto}\r\n                      src={props.photos.small != null ? props.photos.small : AvatarIMG}/></div>\r\n        </NavLink>\r\n        <div>Nickname: {props.name}; id: {props.id}; status: {props.status}</div>\r\n        <button\r\n            disabled={props.waitingSubscribe.status === true && props.waitingSubscribe.id === props.id}\r\n            onClick={() => {\r\n                    props.followed === true\r\n                        ? props.unfollow(props.id)\r\n                        : props.follow(props.id);\r\n                }}>\r\n            {props.followed === true ? \"unfollow\" : \"follow\"}\r\n        </button>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default UserElementMarkup;","import {Pagination} from \"antd\";\r\nimport UserElementMarkup from \"./UserElementMarkup\";\r\nimport React from 'react';\r\n\r\nlet Users = (props) => {\r\n\r\n    function onChange(pageNumber, pageSize) {\r\n        props.onPageChange(pageNumber, pageSize);\r\n    }\r\n\r\n    return <div>\r\n        <Pagination defaultCurrent={1} total={props.totalUsersCount} onChange={onChange}\r\n                    defaultPageSize={props.pageSize}/>\r\n\r\n        {props.usersData.map(elem => (\r\n            <UserElementMarkup key={elem.id} id={elem.id} name={elem.name}\r\n                               followed={elem.followed} waitingSubscribe={props.waitingSubscribe}                                    follow={props.follow} unfollow={props.unfollow}\r\n                               photos={elem.photos} status={elem.status}/>\r\n        ))}\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport style from \"./Loading.module.css\";\r\n\r\nlet Loading = () => {\r\n    return <div className={style.lds_roller}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}\r\n\r\nexport default Loading;","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersDataSelector = (state) => {\r\n    return state.usersPage.usersData;\r\n}\r\n\r\nexport const getUsersData = createSelector(getUsersDataSelector, (usersData)=> {\r\n    return usersData.filter(u => true);\r\n});//в эту функцию приходит state, хотя мы его не прописываем - так работает createSelector. (урок 83)\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const waitingResponse = (state) => {\r\n    return state.usersPage.waitingResponse;\r\n}\r\nexport const waitingSubscribe = (state) => {\r\n    return state.usersPage.waitingSubscribe;\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers,\r\n    setCurrentPage, setPageSize,\r\n    unfollow\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Loading from \"../Common/Preloader/Loading\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsersData,\r\n    waitingResponse,\r\n    waitingSubscribe,\r\n} from \"../../redux/user-selector\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    /*return {\r\n        usersData: state.usersPage.usersData,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        waitingResponse: state.usersPage.waitingResponse,\r\n        waitingSubscribe: state.usersPage.waitingSubscribe\r\n    }*/\r\n    return {\r\n        usersData: getUsersData(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        waitingResponse: waitingResponse(state),\r\n        waitingSubscribe: waitingSubscribe(state)\r\n    }\r\n};\r\n\r\n//в классовую компоненту не приходят props. Props приходят в уже отрисованый jsx. Поэтому тут обращаемся к пропсам через this.\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChange = (pageNumber, pageSize) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.setPageSize(pageSize);\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.waitingResponse ? <Loading/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize} currentPage={this.props.currentPage}\r\n                   usersData={this.props.usersData} follow={this.props.follow} unfollow={this.props.unfollow}\r\n                   onPageChange={this.onPageChange} waitingSubscribe={this.props.waitingSubscribe}\r\n                   toggleSubscribeProgress={this.props.toggleSubscribeProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {follow, unfollow, setCurrentPage, getUsers, setPageSize})\r\n)(UsersContainer);","import React, {useEffect, useState} from \"react\";\r\n\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);//возвращает массив, где первым значение будет false, а вторым функция меняющая первое значение\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    const deactivateStatusEditor = () => {\r\n        setEditMode(false);\r\n        props.sendNewStatus(status);\r\n    }\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    return <div>\r\n        PROFILE STATUS:\r\n        {!editMode && <span onDoubleClick={()=>setEditMode(true)}>{status}</span>}\r\n        {editMode && <input onChange={onStatusChange} onBlur={deactivateStatusEditor} value={status}></input>}\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default ProfileStatusHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Loading from \"../../Common/Preloader/Loading\";\r\nimport ProfileStatusHooks from \"./ProfileStatusHooks\";\r\nimport AvatarIMG from \"../../../assets/img/simple-avatar.png\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if(!props.profile){\r\n        return <Loading/>\r\n    }\r\n\r\n    const onPhotoSelected = (e) => {\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.small != null ? props.profile.photos.small : AvatarIMG} alt='profile avatar'/>\r\n                {props.profile.userId === props.yourID && <input onChange={onPhotoSelected} type='file'/>}\r\n                <p>id: {props.profile.userId}</p>\r\n                <p>nickname: {props.profile.fullName}</p>\r\n                <ProfileStatusHooks sendNewStatus={props.sendNewStatus} status={props.status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://store.playstation.com/store/api/chihiro/00_09_000/container/UA/ru/999/EP0177-CUSA07010_00-AV00000000000004/1593099665000/image?w=240&h=240&bg_color=000000&opacity=100&_version=00_09_000\" alt='avatar'/>\r\n          {props.message}\r\n      <div>\r\n        <span>Like : {props.like} </span>\r\n        <span>Dislike : 0</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let refTextArea = React.createRef(); //получает ссылку на объект. Тут на тег <textarea/>\r\n\r\n    let onPostChange = () => {\r\n        let postTextValue = refTextArea.current.value;\r\n        props.updTypingPost(postTextValue);\r\n    }\r\n\r\n    let addToPostsDataBase = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    return <div className={s.content}>\r\n        <div>\r\n            My posts\r\n        </div>\r\n\r\n        <textarea onChange={onPostChange} ref={refTextArea} value={props.postTypingText}/>\r\n        <div>\r\n            <button onClick={addToPostsDataBase}>Add post</button>\r\n            <button>Remove</button>\r\n        </div>\r\n\r\n        <div className={s.posts}>\r\n            {props.postsDataBase.map(elem => <Post message={elem.text} key={elem.id}\r\n                                                               like={elem.like}/>)}\r\n        </div>\r\n\r\n    </div>\r\n\r\n});\r\n\r\nexport default MyPosts;","import {addPostCreator, updTypingPostCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsDataBase: state.profilePage.postsDataBase,\r\n        postTypingText: state.profilePage.postTypingText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostCreator());\r\n        },\r\n        updTypingPost: (text) => {\r\n            let action = updTypingPostCreator(text);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return <div>\r\n        <ProfileInfo savePhoto={props.savePhoto} profile={props.profile} yourID={props.yourID} status={props.status} sendNewStatus={props.sendNewStatus}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {getUserProfile, getUserStatus, uploadPhoto, sendNewStatus} from \"../../redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userID;\r\n        if(!userID){\r\n            userID = this.props.yourID;\r\n        }\r\n        this.props.getUserProfile(userID);\r\n        this.props.getUserStatus(userID);\r\n    };\r\n\r\n    render() {\r\n        return <div>\r\n            <Profile {...this.props} sendNewStatus={this.props.sendNewStatus}/>\r\n        </div>\r\n    }// {...this.props} передает все пропсы из mapStateToProps ProfileContainer'а в <Profile/> (59 урок 16минута)\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    yourID: state.authorizeBlock.userID\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, sendNewStatus, savePhoto: uploadPhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer); //оборачивание идет по функциям снизу вверх по списку\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuthorize\r\n                ? <div><p>user: {props.login}</p>\r\n                <button onClick={props.logOut}>Log Out</button> </div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logOut} from \"../../redux/authorizeReducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthorize: state.authorizeBlock.isAuthorize,\r\n    login: state.authorizeBlock.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logOut})(HeaderContainer);","import React from 'react';\r\nimport {Form, Input, Button, Checkbox} from 'antd';\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 8,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 4,\r\n        span: 8,\r\n    },\r\n};\r\n\r\nconst Login = ({signIn, isAuthorize}) => {\r\n    const onFinish = (values) => {\r\n        signIn(values.username, values.password, values.remember);\r\n        console.log('Success:', values);\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    if (isAuthorize === true) return <div>Your already login!</div>;\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <Form {...layout} name=\"basic\" initialValues={{remember: true}} onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n            <Form.Item\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input.Password/>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    </div>;\r\n}\r\n\r\nexport default Login;","import {sendSignIdData} from \"../../redux/authorizeReducer\";\r\nimport Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuthorize: state.authorizeBlock.isAuthorize\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn: (email, password, rememberMe) => {\r\n            dispatch(sendSignIdData(email, password, rememberMe));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {NavLink, Route, withRouter} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/appReducer\";\r\nimport Loading from \"./components/Common/Preloader/Loading\";\r\nimport { Layout, Menu } from 'antd';\r\nimport s from \"./components/Navbar/Navbar.module.css\";\r\nimport TeamOutlined from \"@ant-design/icons/lib/icons/TeamOutlined\";\r\nimport UserOutlined from \"@ant-design/icons/lib/icons/UserOutlined\";\r\nimport CommentOutlined from \"@ant-design/icons/lib/icons/CommentOutlined\";\r\nimport LoginOutlined from \"@ant-design/icons/lib/icons/LoginOutlined\";\r\nimport GithubOutlined from \"@ant-design/icons/lib/icons/GithubOutlined\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    };\r\n\r\n    render() {\r\n        if(!this.props.initialized) {\r\n            return <Loading/>\r\n        }\r\n        return (\r\n            <Layout>\r\n                <Sider\r\n                    breakpoint=\"lg\"\r\n                    collapsedWidth=\"0\"\r\n                    onBreakpoint={broken => {\r\n                        console.log(broken);\r\n                    }}\r\n                    onCollapse={(collapsed, type) => {\r\n                        console.log(collapsed, type);\r\n                    }}\r\n                >\r\n                    <div className=\"logo\" />\r\n                    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\r\n                        <Menu.Item key=\"1\"  icon={<UserOutlined />}>\r\n                            <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\" icon={<CommentOutlined />}>\r\n                            <NavLink to=\"/dialogs\" activeClassName={s.active}>Dialogs</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"3\" icon={<TeamOutlined />}>\r\n                            <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"4\" icon={<LoginOutlined />}>\r\n                            <NavLink to=\"/login\" activeClassName={s.active}>Login</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"5\" icon={<GithubOutlined />}>\r\n                            <a target='_blank' href=\"https://github.com/niZaliznyak/React_v1\" activeClassName={s.active}>Git-repo</a>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }} />\r\n                    <Content style={{ margin: '24px 16px 0' }}>\r\n                        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                            <Route path=\"/profile/:userID?\" render={() => <ProfileContainer/>}/>\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login\" render={() => <LoginContainer/>}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{ textAlign: 'center' }}>Ссылка на <a target='_blank' id='gitURL' href=\"https://github.com/niZaliznyak/React_v1\">git-репозиторий</a></Footer>\r\n                </Layout>\r\n            </Layout>\r\n            /*<div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/profile/:userID?\" render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\" render={() => <LoginContainer/>}/>\r\n                </div>\r\n            </div>*/\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);","import React from 'react';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/reduxStore\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\n\r\n\r\nlet reRenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n\r\n        </HashRouter>, document.getElementById('root'));\r\n}; //bind позволяет при использовании this. ссылаться на свойства оригинального объекта, а не свойства объекта которым будет вызвана.\r\n\r\nreRenderEntireTree();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1QQHQ\",\"active\":\"Navbar_active__3_ypk\"};","module.exports = __webpack_public_path__ + \"static/media/simple-avatar.da821694.png\";"],"sourceRoot":""}